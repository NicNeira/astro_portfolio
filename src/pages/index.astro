---
import Hero from "@components/Hero.astro";
import Content from "@components/Content.astro";
import Steps from "@components/Steps.astro";
import Skill from "@components/Skill.astro";
import CallToAction from "@components/CallToAction.astro";
import Layout from "@layouts/PageLayout.astro";

import ProfilePhoto from "../assets/images/profile.jpg";

import { getContentProjects, getExtraWorksImages } from "@utils/projectsData";
import { getLangFromUrl, useTranslations } from "@utils/i18n";

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

const profileName = t("hero.name");
const subTitle = t("hero.subtitle");

const metadata = {
  title: t("site.title"),
  description: t("site.description"),
  canonical: "https://maximiliano-neira.com/",
};

const ContentProjects = getContentProjects(t, lang);
const portfolioSectionTitle = t("portfolio.title");
const portfolioSectionSubtitle = t("portfolio.subtitle");

const extraWorksImages = getExtraWorksImages();
const otherWorksTitle = t("other-works.title");
const otherWorksSubtitle = t("other-works.subtitle");
---

<Layout metadata={metadata}>
  <Hero
    id="hero"
    title={profileName}
    subtitle={subTitle}
    image={{
      src: ProfilePhoto,
      alt: "Retrato de Maximiliano Neira, director de arte y cineasta",
      width: 400,
      height: 400,
    }}
  >
    <Fragment slot="paragraph">
      {t("hero.description")}
    </Fragment>

    <Fragment slot="actions">
      <div
        class="flex justify-center w-full intersect-once intersect-quarter motion-safe:md:opacity-0 motion-safe:md:intersect:animate-fade"
      >
        <a
          href={`https://maxistorage.blob.core.windows.net/assets/cv/CV-${lang.toUpperCase()}.pdf`}
          download={`CV-Maximiliano-Neira-${lang.toUpperCase()}.pdf`}
          target="_blank"
          class="inline-flex items-center justify-center px-2 py-1 text-sm font-medium text-white bg-blue-600 hover:bg-blue-800 rounded-lg shadow-lg transition-colors duration-200"
        >
          <svg
            class="w-4 h-4 mr-2"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
            xmlns="http://www.w3.org/2000/svg"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"
            ></path>
          </svg>
          {t("hero.download-cv")}
        </a>
      </div>
    </Fragment>
  </Hero>

  <!-- <Content
    id="about"
    items={ContentProjects}
    title={portfolioSectionTitle}
    subtitle={portfolioSectionSubtitle}
    isReversed
    image={{
      src: AboutPhoto,
      alt: "About Maximiliano Neira, art director and filmmaker",
      width: 500,
      height: 500,
    }}
  >
    <Fragment slot="content">
      <h3
        class="text-2xl font-bold tracking-tight dark:text-white sm:text-3xl mb-2"
      >
        {t("general.years-experience")}
      </h3>
      <p>
        <br />{t("general.collaboration-description")}
      </p>
    </Fragment>

    <Fragment slot="bg">
      <div class="absolute inset-0 bg-blue-50 dark:bg-slate-800"></div>
    </Fragment>
  </Content> -->

  <Content
    id="about"
    columns={3}
    video={{
      src: "https://maxistorage.blob.core.windows.net/assets/reel.mp4",
      alt: "About Me Video",
    }}
  >
    <Fragment slot="content">
      <h1
        class="text-5xl md:text-6xl font-bold leading-tighter tracking-tighter mb-4 font-heading dark:text-gray-200 intersect-once intersect-quarter motion-safe:md:opacity-0 motion-safe:md:intersect:animate-fade"
        set:html={t("about.title")}
      />
      <p>
        {t("about.description")}
      </p>
      <p class="mt-2">
        {t("about.description-2")}
      </p>
    </Fragment>
  </Content>

  <!-- Steps  -->
  <!-- <Steps
    id="resume"
    title="Work experience"
    items={[
      {
        title:
          'Graphic Designer <br /> <span class="font-normal">ABC Design Studio, New York, NY</span> <br /> <span class="text-sm font-normal">2021 - Present</span>',
        description: `Collaborate with clients to understand design requirements and objectives. <br /> Develop branding solutions, including logos, color palettes, and brand guidelines. <br /> Design marketing materials such as brochures, posters, and digital assets. <br /> Create visually appealing user interfaces for websites and applications.`,
        icon: "tabler:briefcase",
        classes: {
          title: "dark:text-white",
          description: "dark:text-gray-400",
        },
      },
      {
        title:
          'Junior Graphic Designer <br /> <span class="font-normal">XYZ Creative Agency, Los Angeles, CA</span> <br /> <span class="text-sm font-normal">2018 - 2021</span>',
        description: `Assisted senior designers in creating design concepts and visual assets. <br /> Contributed to the development of brand identities and marketing collateral. <br /> Collaborated with the marketing team to ensure consistent design across campaigns. <br /> Gained hands-on experience in various design software and tools.`,
        icon: "tabler:briefcase",
        classes: {
          title: "dark:text-white",
          description: "dark:text-gray-400",
        },
      },
    ]}
    classes={{ container: "max-w-3xl", items: "dark:text-white" }}
  /> -->

  <Steps
    id="resume"
    title={t("experience.title")}
    items={[
      {
        title: `${t("experience.student.title")} <br /> <span class="font-normal">${t("experience.student.company")}</span> <br /> <span class="text-sm font-normal">${t("experience.student.period")}</span>`,
        description: `${t("experience.student.description")} <br /> <a href="https://www.arcos.cl/carreras/cine/" target="_blank" class="text-primary hover:underline">arcos.cl</a>`,
        icon: "tabler:school",
        classes: {
          title: "dark:text-white",
          description: "dark:text-gray-400",
        },
      },
      {
        title: `${t("experience.casa-hojas.title")} <br /> <span class="font-normal">${t("experience.casa-hojas.project")}</span> <br /> <span class="text-sm font-normal">${t("experience.casa-hojas.period")}</span>`,
        description: t("experience.casa-hojas.description"),
        icon: "tabler:palette",
        classes: {
          title: "dark:text-white",
          description: "dark:text-gray-400",
        },
      },
      {
        title: `${t("experience.ciudad-latente.title")} <br /> <span class="font-normal">${t("experience.ciudad-latente.project")}</span> <br /> <span class="text-sm font-normal">${t("experience.ciudad-latente.period")}</span>`,
        description: t("experience.ciudad-latente.description"),
        icon: "tabler:building-estate",
        classes: {
          title: "dark:text-white",
          description: "dark:text-gray-400",
        },
      },
      {
        title: `${t("experience.inhumano.title")} <br /> <span class="font-normal">${t("experience.inhumano.project")}</span> <br /> <span class="text-sm font-normal">${t("experience.inhumano.period")}</span>`,
        description: t("experience.inhumano.description"),
        icon: "tabler:movie",
        classes: {
          title: "dark:text-white",
          description: "dark:text-gray-400",
        },
      },
      {
        title: `${t("experience.retrato-oval.title")} <br /> <span class="font-normal">${t("experience.retrato-oval.project")}</span> <br /> <span class="text-sm font-normal">${t("experience.retrato-oval.period")}</span>`,
        description: t("experience.retrato-oval.description"),
        icon: "tabler:brush",
        classes: {
          title: "dark:text-white",
          description: "dark:text-gray-400",
        },
      },
    ]}
    classes={{ container: "max-w-3xl" }}
  />
  <!-- Skills -->
  <Skill
    id="skills"
    title={t("skills.title")}
    subtitle={t("skills.subtitle")}
    columns={3}
    defaultIcon="tabler:point-filled"
    items={[
      {
        title: t("skills.art-direction.title"),
        description: t("skills.art-direction.description"),
        icon: "tabler:palette",
        classes: {
          title: "dark:text-white",
          description: "dark:text-gray-400",
        },
      },
      {
        title: t("skills.model-design.title"),
        description: t("skills.model-design.description"),
        icon: "tabler:3d-cube-sphere",
        classes: {
          title: "dark:text-white",
          description: "dark:text-gray-400",
        },
      },
      {
        title: t("skills.cinematography.title"),
        description: t("skills.cinematography.description"),
        icon: "tabler:camera",
        classes: {
          title: "dark:text-white",
          description: "dark:text-gray-400",
        },
      },
      {
        title: t("skills.services.title"),
        description: t("skills.services.description"),
        icon: "tabler:list-check",
        classes: {
          title: "dark:text-white",
          description: "dark:text-gray-400",
        },
      },
      {
        title: t("skills.languages.title"),
        description: t("skills.languages.description"),
        icon: "tabler:language",
        classes: {
          title: "dark:text-white",
          description: "dark:text-gray-400",
        },
      },
    ]}
  />
  <!-- Projects -->
  {
    ContentProjects.map((project, index) => (
      <Content
        id={index === 0 ? "porfolio" : undefined}
        title={index === 0 ? portfolioSectionTitle : undefined}
        subtitle={index === 0 ? portfolioSectionSubtitle : undefined}
        isReversed={true}
        isAfterContent={index !== 0}
        items={[
          {
            title: t("general.description"),
            description: project.description,
          },
        ]}
        image={project.image}
        callToAction={{
          text: t("general.view-project"),
          icon: "tabler:chevron-right",
          href: project.href,
        }}
      >
        {" "}
        <Fragment slot="content">
          <h3
            class="text-2xl font-bold tracking-tight dark:text-white sm:text-3xl mb-2"
            set:html={project.projectTitleHTML}
            transition:name={`title-${project.id}`}
            transition:animate="fade"
          />
          <div transition:name={`description-${project.id}`} class="hidden" />
        </Fragment>
        <Fragment slot="bg">
          <div class="absolute inset-0 bg-blue-50 dark:bg-transparent" />
        </Fragment>
      </Content>
    ))
  }

  <!-- Other Works Section *********** -->
  <section class="py-16">
    <div class="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8">
      <div class="text-center mb-12">
        <h2
          class="text-3xl md:text-4xl font-bold tracking-tight dark:text-white mb-4 intersect-once intersect-quarter motion-safe:md:opacity-0 motion-safe:md:intersect:animate-fade"
        >
          {otherWorksTitle}
        </h2>
        <p
          class="text-lg text-gray-600 dark:text-gray-300 max-w-2xl mx-auto intersect-once intersect-quarter motion-safe:md:opacity-0 motion-safe:md:intersect:animate-fade"
        >
          {otherWorksSubtitle}
        </p>
      </div>

      <div
        class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 intersect-once intersect-quarter motion-safe:md:opacity-0 motion-safe:md:intersect:animate-fade"
      >
        {
          extraWorksImages.map((image, index) => (
            <div
              class="aspect-video overflow-hidden rounded-lg shadow-lg cursor-pointer gallery-image hover:scale-105 transition-transform duration-300"
              data-index={index}
            >
              <img
                src={image.src}
                alt={image.alt}
                width={image.width || 1920}
                height={image.height || 1080}
                class="w-full h-full object-cover"
                loading="lazy"
              />
            </div>
          ))
        }
      </div>
    </div>
  </section>

  <!-- CallToAction Widget *********** -->
  <CallToAction
    title={t("cta.title")}
    subtitle={t("cta.subtitle")}
    actions={[
      {
        variant: "primary",
        text: t("cta.button"),
        href: `${lang === "es" ? "" : "/" + lang}/contact`,
      },
    ]}
  />

  <!-- Modal Lightbox for Other Works -->
  <div id="lightbox" class="lightbox-overlay">
    <div class="lightbox-container">
      <button id="lightbox-close" class="lightbox-close" aria-label="Cerrar"
        >×</button
      >
      <button
        id="lightbox-prev"
        class="lightbox-nav lightbox-prev"
        aria-label="Imagen anterior">‹</button
      >
      <button
        id="lightbox-next"
        class="lightbox-nav lightbox-next"
        aria-label="Imagen siguiente">›</button
      >
      <img id="lightbox-image" class="lightbox-image" alt="" />
      <div class="lightbox-counter">
        <span id="lightbox-current">1</span> / <span id="lightbox-total"
          >{extraWorksImages.length}</span
        >
      </div>
    </div>
  </div>

  <style>
    .lightbox-overlay {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(0, 0, 0, 0);
      z-index: 1000;
      display: flex;
      justify-content: center;
      align-items: center;
      opacity: 0;
      visibility: hidden;
      transition: all 0.3s ease;
    }
    .lightbox-overlay.active {
      background-color: rgba(0, 0, 0, 0.9);
      opacity: 1;
      visibility: visible;
    }

    .lightbox-container {
      position: relative;
      width: 100vw;
      height: 100vh;
      display: flex;
      justify-content: center;
      align-items: center;
    }

    .lightbox-image {
      max-width: 70vw;
      max-height: 70vh;
      object-fit: contain;
      border-radius: 8px;
      box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.5);
      transform: scale(0.8);
      opacity: 0;
      transition: all 0.4s ease;
    }
    .lightbox-overlay.active .lightbox-image {
      transform: scale(1);
      opacity: 1;
    }

    .lightbox-close {
      position: fixed;
      top: 30px;
      right: 30px;
      background: none;
      border: none;
      font-size: 40px;
      color: white;
      cursor: pointer;
      z-index: 1001;
      opacity: 0;
      transform: translateY(-20px);
      transition: all 0.3s ease 0.1s;
    }
    .lightbox-overlay.active .lightbox-close {
      opacity: 1;
      transform: translateY(0);
    }

    .lightbox-close:hover {
      color: #ff6b6b;
    }

    .lightbox-nav {
      position: fixed;
      top: 50%;
      transform: translateY(-50%);
      background: rgba(255, 255, 255, 0.1);
      border: none;
      font-size: 32px;
      color: white;
      cursor: pointer;
      z-index: 1001;
      width: 50px;
      height: 50px;
      border-radius: 50%;
      backdrop-filter: blur(10px);
      display: grid;
      place-items: center;
      font-family: monospace;
      line-height: 1;
      text-align: center;
      vertical-align: middle;
      opacity: 0;
      transition: all 0.3s ease 0.2s;
    }
    .lightbox-overlay.active .lightbox-nav {
      opacity: 1;
    }

    .lightbox-overlay.active .lightbox-nav:hover {
      background: rgba(255, 255, 255, 0.2);
      transform: translateY(-50%) scale(1.1);
    }

    .lightbox-prev {
      left: 120px;
    }

    .lightbox-next {
      right: 120px;
    }

    .lightbox-counter {
      position: fixed;
      bottom: 30px;
      left: 50%;
      transform: translateX(-50%) translateY(20px);
      color: white;
      font-size: 16px;
      font-weight: 500;
      background: rgba(0, 0, 0, 0.5);
      padding: 8px 16px;
      border-radius: 20px;
      backdrop-filter: blur(10px);
      opacity: 0;
      transition: all 0.3s ease 0.15s;
    }
    .lightbox-overlay.active .lightbox-counter {
      opacity: 1;
      transform: translateX(-50%) translateY(0);
    }

    /* Responsive */
    @media (max-width: 768px) {
      .lightbox-image {
        max-width: 85vw;
        max-height: 60vh;
      }

      .lightbox-close {
        top: 20px;
        right: 20px;
        font-size: 30px;
      }

      .lightbox-nav {
        font-size: 24px;
        width: 40px;
        height: 40px;
      }

      .lightbox-prev {
        left: 20px;
      }

      .lightbox-next {
        right: 20px;
      }

      .lightbox-counter {
        bottom: 20px;
        font-size: 14px;
        padding: 6px 12px;
      }
    }
  </style>

  <script define:vars={{ images: extraWorksImages }}>
    let currentImageIndex = 0;
    const lightbox = document.getElementById("lightbox");
    const lightboxImage = document.getElementById("lightbox-image");
    const lightboxCurrent = document.getElementById("lightbox-current");
    const lightboxTotal = document.getElementById("lightbox-total");
    const closeBtn = document.getElementById("lightbox-close");
    const prevBtn = document.getElementById("lightbox-prev");
    const nextBtn = document.getElementById("lightbox-next");

    // Configurar el total de imágenes
    lightboxTotal.textContent = images.length;

    // Añadir event listeners a todas las imágenes de la galería
    const galleryImages = document.querySelectorAll(".gallery-image");
    galleryImages.forEach((imageContainer) => {
      imageContainer.addEventListener("click", () => {
        const imageIndex = parseInt(imageContainer.getAttribute("data-index"));
        openLightbox(imageIndex);
      });
    });

    function openLightbox(index) {
      currentImageIndex = index;
      updateLightboxImage();
      lightbox.classList.add("active");
      document.body.style.overflow = "hidden";
    }

    function closeLightbox() {
      lightbox.classList.remove("active");
      setTimeout(() => {
        document.body.style.overflow = "auto";
      }, 300);
    }

    function updateLightboxImage() {
      const currentImage = images[currentImageIndex];
      lightboxImage.src = currentImage.src;
      lightboxImage.alt = currentImage.alt;
      lightboxCurrent.textContent = currentImageIndex + 1;
    }

    function nextImage() {
      currentImageIndex = (currentImageIndex + 1) % images.length;
      updateLightboxImage();
    }

    function prevImage() {
      currentImageIndex =
        (currentImageIndex - 1 + images.length) % images.length;
      updateLightboxImage();
    }

    // Event listeners
    closeBtn.addEventListener("click", closeLightbox);
    nextBtn.addEventListener("click", nextImage);
    prevBtn.addEventListener("click", prevImage);

    // Cerrar al hacer click en el overlay
    lightbox.addEventListener("click", (e) => {
      if (e.target === lightbox) {
        closeLightbox();
      }
    });

    // Navegación con teclado
    document.addEventListener("keydown", (e) => {
      if (!lightbox.classList.contains("active")) return;

      switch (e.key) {
        case "Escape":
          closeLightbox();
          break;
        case "ArrowRight":
          nextImage();
          break;
        case "ArrowLeft":
          prevImage();
          break;
      }
    });
  </script>
</Layout>

---
import { Icon } from "astro-icon/components";
import { twMerge } from "tailwind-merge";

import type { CallToAction as Props } from "@utils/types";

type VariantType = "primary" | "secondary" | "tertiary" | "link";

const {
  variant = "secondary",
  target,
  icon = "",
  class: className = "",
  type,
  href,
  text,
  ...rest
} = Astro.props as Props & { variant?: VariantType };

// Estilos base comunes para botones (excluyendo la variante 'link')
const commonButtonStyles =
  "py-2 px-4 rounded font-semibold focus:outline-none focus:ring-2 focus:ring-offset-2 transition-colors duration-150 ease-in-out inline-flex items-center justify-center text-center gap-x-1.5";

const variantsClasses = {
  primary: `${commonButtonStyles} bg-blue-600 text-white hover:bg-blue-700 focus:ring-blue-500`,
  secondary: `${commonButtonStyles} bg-gray-200 text-gray-700 hover:bg-gray-300 focus:ring-gray-500 dark:bg-gray-700 dark:text-gray-200 dark:hover:bg-gray-600`,
  tertiary: `${commonButtonStyles} bg-transparent text-blue-600 border border-blue-600 hover:bg-blue-50 dark:text-blue-400 dark:border-blue-400 dark:hover:bg-blue-900/50 focus:ring-blue-500`,
  link: "text-blue-600 hover:text-blue-800 dark:text-blue-400 dark:hover:text-blue-300 hover:underline focus:outline-none focus:ring-1 focus:ring-blue-500 rounded-sm inline-flex items-center text-center gap-x-1.5",
};

// Determinar la etiqueta HTML (<button> o <a>) basado en la prop 'type'
const isButtonElement =
  type === "button" || type === "submit" || type === "reset";
const Tag = isButtonElement ? "button" : "a";

let tagSpecificProps: Record<string, any> = {};
if (isButtonElement) {
  tagSpecificProps.type = type;
} else {
  // Es una etiqueta <a>
  tagSpecificProps.href = href;
  if (target) {
    tagSpecificProps.target = target;
    if (target === "_blank") {
      tagSpecificProps.rel = "noopener noreferrer";
    }
  }
}
// Combinar clases
const finalClass = twMerge(
  variantsClasses[variant as keyof typeof variantsClasses] ||
    variantsClasses.secondary,
  className
);
---

<Tag class={finalClass} {...tagSpecificProps} {...rest}>
  {text ? text : <slot />}
  {icon && <Icon name={icon} class:list={["w-5 h-5", "shrink-0"]} />}
</Tag>

---
import { Image } from "astro:assets";

import Headline from "@components/ui/Headline.astro";
import WidgetWrapper from "@components/ui/WidgetWrapper.astro";
import ItemGrid from "@components/ui/ItemGrid.astro";
import Button from "./ui/Button.astro";
import ImageCarousel from "@components/ui/ImageCarousel.astro"; // Importar ImageCarousel
import type { Item } from "@utils/types";

const {
  title = await Astro.slots.render("title"),
  subtitle = await Astro.slots.render("subtitle"),
  tagline,
  content = await Astro.slots.render("content"),
  callToAction,
  items = [],
  columns,
  image = await Astro.slots.render("image"), // puede ser string, objeto o array de objetos
  isReversed = false,
  isAfterContent = false,

  id,
  isDark = false,
  classes = {},
} = Astro.props;

// Determinar el tipo de contenido de la imagen
const isImageArray =
  Array.isArray(image) &&
  image.every((img) => typeof img === "object" && img !== null && img.src);
const isImageObject =
  typeof image === "object" && image !== null && !isImageArray && image.src;
const isImageString = typeof image === "string" && image.trim() !== "";
const hasImage = isImageArray || isImageObject || isImageString;
---

<WidgetWrapper
  id={id}
  isDark={isDark}
  containerClass={`max-w-7xl mx-auto ${isAfterContent ? "!pt-0 md:!pt-0 lg:!pt-0" : ""} ${classes?.container ?? ""}`}
>
  <Headline
    title={title}
    subtitle={subtitle}
    tagline={tagline}
    classes={{
      container: "max-w-xl sm:mx-auto lg:max-w-2xl",
      title:
        "text-4xl md:text-5xl font-bold tracking-tighter mb-4 font-heading dark:text-white",
      subtitle:
        "max-w-3xl mx-auto sm:text-center text-xl text-muted dark:text-slate-400 dark:text-slate-400",
    }}
  />
  <div class="mx-auto max-w-7xl p-4 md:px-8">
    <div class={`md:flex ${isReversed ? "md:flex-row-reverse" : ""} md:gap-16`}>
      <div class="md:basis-1/2 self-center">
        {
          content && (
            <div class="text-lg dark:text-slate-400" set:html={content} />
          )
        }

        {
          items && items.length > 0 && (
            <div class="mb-8">
              {items.map((item: Item) => (
                <div class="flex items-start mb-4">
                  <div class="rtl:ml-0 rtl:mr-2">
                    {item.description && (
                      <p class="text-muted dark:text-slate-400">
                        {item.description}
                      </p>
                    )}
                  </div>
                </div>
              ))}
            </div>
          )
        }

        {
          callToAction && (
            <div class=" text-primary">
              <Button variant="link" {...callToAction} />
            </div>
          )
        }
      </div>

      <div aria-hidden="true" class="mt-10 md:mt-0 md:basis-1/2">
        {
          Astro.slots.has("image") ? (
            <slot name="image" />
          ) : isImageArray ? (
            <ImageCarousel
              images={image}
              carouselId={`carousel-${crypto.randomUUID()}`}
            />
          ) : isImageObject ? (
            <div class="w-full mt-8 md:mt-0 flex justify-center intersect-once intercept-no-queue intersect-quarter motion-safe:md:opacity-0 motion-safe:md:intersect:animate-fade">
              <div
                class="relative m-auto w-full"
                style={`max-width: ${Math.min(image.width || 600, 600)}px; aspect-ratio: ${(image.width || 600) / (image.height || 400)};`}
              >
                <div class="aspect-video relative overflow-hidden rounded-md">
                  <Image
                    class="w-full h-full object-cover object-center"
                    src={image.src}
                    alt={image.alt || ""}
                    width={Math.min(image.width || 600, 600)}
                    height={Math.min(image.height || 400, 400)}
                    loading="lazy"
                    decoding="async"
                    sizes="(max-width: 768px) 100vw, 50vw"
                  />
                </div>
              </div>
            </div>
          ) : isImageString ? (
            <div class="w-full mt-8 md:mt-0 intersect-once intercept-no-queue intersect-quarter motion-safe:md:opacity-0 motion-safe:md:intersect:animate-fade">
              <div class="relative m-auto max-w-full md:max-w-none">
                <div class="aspect-video relative overflow-hidden rounded-md">
                  <div class="absolute inset-0 flex items-center justify-center">
                    <Fragment set:html={image} />
                  </div>
                </div>
              </div>
            </div>
          ) : null
        }
      </div>
    </div>
  </div>
</WidgetWrapper>

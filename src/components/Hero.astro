---
import { Image } from "astro:assets";

const {
  title = await Astro.slots.render("title"),
  subtitle = await Astro.slots.render("subtitle"),
  tagline,

  content = await Astro.slots.render("content"),
  actions = await Astro.slots.render("actions"),
  image = await Astro.slots.render("image"),
  paragraph = await Astro.slots.render("paragraph"),

  id,
  bg = await Astro.slots.render("bg"),
} = Astro.props;

// Determinar el tipo de contenido de la imagen
const isImageObject = typeof image === "object" && image !== null && image.src;
const isImageString = typeof image === "string" && image.trim() !== "";
const hasImage = isImageObject || isImageString;
---

<div class="relative max-w-7xl mx-auto px-4 sm:px-6">
  <div class="pt-0 md:pt-[76px] pointer-events-none"></div>
  <div class="py-8 md:py-14">
    {/* Contenedor principal para imagen y texto */}
    {/* Aplicar flex-col-reverse para móvil y md:flex-row para escritorio */}
    <div class="flex flex-col-reverse md:flex-row md:items-center md:gap-8">
      {/* Columna de la imagen (izquierda en escritorio, abajo en móvil) */}
      {
        isImageObject ? (
          <div class="w-full md:w-1/2 mt-8 md:mt-0 flex justify-center intersect-once intercept-no-queue intersect-quarter motion-safe:md:opacity-0 motion-safe:md:intersect:animate-fade">
            {/* Aplicar max-width al div contenedor de la imagen con aspect ratio fijo */}
            <div
              class="relative m-auto w-64 h-72 md:w-80 md:h-96"
              style="aspect-ratio: 4/5;"
            >
              <Image
                class="rounded-md w-full h-full object-cover shadow-lg"
                src={image.src}
                alt={image.alt || ""}
                width={Math.min(image.width || 400, 400)}
                height={Math.min(image.height || 400, 400)}
                loading="eager"
                decoding="sync"
                fetchpriority="high"
                style="display: block; width: 100%; height: 100%; object-position: center center;"
              />
            </div>
          </div>
        ) : isImageString ? (
          <div class="w-full md:w-1/2 mt-8 md:mt-0 intersect-once intercept-no-queue intersect-quarter motion-safe:md:opacity-0 motion-safe:md:intersect:animate-fade">
            <div
              class="relative m-auto max-w-full md:max-w-none"
              style="aspect-ratio: 5/4;"
            >
              <Fragment set:html={image} />
            </div>
          </div>
        ) : null
      }

      {/* Columna del contenido (derecha en escritorio, arriba en móvil) */}
      <div
        class:list={["w-full md:w-1/2", { "text-center md:text-left": image }]}
      >
        {/* Alineación condicional */}
        <div class:list={["pb-6 md:pb-10", { "max-w-5xl mx-auto": !image }]}>
          {
            tagline && (
              <p
                class:list={[
                  "text-base text-secondary dark:text-blue-200 font-bold tracking-wide uppercase intersect-once intersect-quarter motion-safe:md:opacity-0 motion-safe:md:intersect:animate-fade",
                  { "md:text-left": image },
                ]}
                set:html={tagline}
              />
            )
          }
          {
            title && (
              <h1
                class:list={[
                  "text-5xl md:text-6xl font-bold leading-tighter tracking-tighter mb-4 font-heading dark:text-gray-200 intersect-once intersect-quarter motion-safe:md:opacity-0 motion-safe:md:intersect:animate-fade",
                  { "md:text-left": image },
                ]}
                set:html={title}
              />
            )
          }
          <div
            class:list={[{ "max-w-3xl": !image, "mx-auto": !image || !image }]}
          >
            {/* Ajuste de max-w y mx-auto si hay imagen */}
            {
              subtitle && (
                <p
                  class:list={[
                    "text-xl text-muted  dark:text-slate-300 intersect-once intersect-quarter motion-safe:md:opacity-0 motion-safe:md:intersect:animate-fade",
                    { "md:text-left": image },
                  ]}
                  set:html={subtitle}
                />
              )
            }

            {/* Renderizar el párrafo si existe */}
            {
              paragraph && (
                <div class="mt-4">
                  <p
                    class:list={[
                      "text-muted dark:text-slate-300 intersect-once intersect-quarter motion-safe:md:opacity-0 motion-safe:md:intersect:animate-fade",
                      { "md:text-left": image },
                    ]}
                  >
                    <Fragment set:html={paragraph} />
                  </p>
                </div>
              )
            }
          </div>
          {content && <Fragment set:html={content} />}
          {/* Renderizar acciones si existen */}
          {
            actions && (
              <div
                class:list={[
                  "mt-8 flex flex-col sm:flex-row sm:justify-center items-start sm:items-center sm:gap-4",
                  {
                    "md:justify-start": hasImage,
                    "justify-center": !hasImage,
                  },
                ]}
              >
                <Fragment set:html={actions} />
              </div>
            )
          }
        </div>
      </div>
    </div>
  </div>
</div>

<style>
  /* Evitar layout shift reservando espacio para imágenes */
  .hero-image-container {
    contain: layout style;
  }

  /* Skeleton loader para imágenes principales */
  .hero-image-container::before {
    content: "";
    display: block;
    background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);
    background-size: 200% 100%;
    animation: skeleton 1.5s infinite;
    position: absolute;
    inset: 0;
    border-radius: 0.375rem;
    z-index: -1;
  }

  @keyframes skeleton {
    0% {
      background-position: 200% 0;
    }
    100% {
      background-position: -200% 0;
    }
  }
</style>

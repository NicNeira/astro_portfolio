---
import { languages, getLangFromUrl } from "@utils/i18n";

const currentLang = getLangFromUrl(Astro.url);
const currentPath = Astro.url.pathname;

// Función para generar URLs de idiomas
function getLocalizedPath(lang: string, currentPath: string) {
  const pathSegments = currentPath.split("/").filter(Boolean);

  // Si la primera parte es un código de idioma, reemplazarla
  if (pathSegments[0] && pathSegments[0] in languages) {
    pathSegments[0] = lang;
  } else if (lang !== "es") {
    // Si no hay idioma en la URL y no es español, agregar el idioma
    pathSegments.unshift(lang);
  }

  // Para español, no agregar prefijo
  if (lang === "es") {
    return (
      "/" + pathSegments.filter((segment) => !(segment in languages)).join("/")
    );
  }

  return "/" + pathSegments.join("/");
}
---

<div class="relative inline-block text-left">
  <div>
    <button
      type="button"
      class="inline-flex justify-center w-full rounded-md border border-gray-300 dark:border-gray-600 shadow-sm px-4 py-2 bg-white dark:bg-gray-800 text-sm font-medium text-gray-700 dark:text-gray-200 hover:bg-gray-50 dark:hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 transition-colors"
      id="language-menu"
      aria-expanded="true"
      aria-haspopup="true"
    >
      <span class="flex items-center">
        <span class="mr-2">🌐</span>
        {languages[currentLang]}
      </span>
      <svg
        class="-mr-1 ml-2 h-5 w-5"
        xmlns="http://www.w3.org/2000/svg"
        viewBox="0 0 20 20"
        fill="currentColor"
        aria-hidden="true"
      >
        <path
          fill-rule="evenodd"
          d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z"
          clip-rule="evenodd"></path>
      </svg>
    </button>
  </div>

  <div
    class="origin-top-right absolute right-0 mt-2 w-40 rounded-md shadow-lg bg-white dark:bg-gray-800 ring-1 ring-black ring-opacity-5 focus:outline-none hidden"
    id="language-dropdown"
    role="menu"
    aria-orientation="vertical"
    aria-labelledby="language-menu"
    tabindex="-1"
  >
    <div class="py-1" role="none">
      {
        Object.entries(languages).map(([lang, name]) => (
          <a
            href={getLocalizedPath(lang, currentPath)}
            class={`${
              currentLang === lang
                ? "bg-gray-100 dark:bg-gray-700 text-gray-900 dark:text-white"
                : "text-gray-700 dark:text-gray-200"
            } group flex items-center px-4 py-2 text-sm hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors`}
            role="menuitem"
            tabindex="-1"
          >
            <span class="mr-3">
              {lang === "es" && "🇪🇸"}
              {lang === "en" && "🇺🇸"}
              {lang === "de" && "🇩🇪"}
            </span>
            {name}
            {currentLang === lang && (
              <span class="ml-auto">
                <svg
                  class="h-4 w-4 text-indigo-600"
                  xmlns="http://www.w3.org/2000/svg"
                  viewBox="0 0 20 20"
                  fill="currentColor"
                >
                  <path
                    fill-rule="evenodd"
                    d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z"
                    clip-rule="evenodd"
                  />
                </svg>
              </span>
            )}
          </a>
        ))
      }
    </div>
  </div>
</div>

<script>
  // Funcionalidad del dropdown
  function initLanguageSelector() {
    const button = document.getElementById("language-menu");
    const dropdown = document.getElementById("language-dropdown");

    if (!button || !dropdown) return;

    button.addEventListener("click", () => {
      const isHidden = dropdown.classList.contains("hidden");
      dropdown.classList.toggle("hidden", !isHidden);
    });

    // Cerrar dropdown al hacer clic fuera
    document.addEventListener("click", (event) => {
      if (
        !button.contains(event.target as Node) &&
        !dropdown.contains(event.target as Node)
      ) {
        dropdown.classList.add("hidden");
      }
    });

    // Cerrar dropdown al presionar Escape
    document.addEventListener("keydown", (event) => {
      if (event.key === "Escape") {
        dropdown.classList.add("hidden");
      }
    });
  }

  // Inicializar cuando el DOM esté listo
  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", initLanguageSelector);
  } else {
    initLanguageSelector();
  }
</script>


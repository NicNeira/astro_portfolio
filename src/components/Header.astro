---
import ToggleTheme from "../components/common/ToggleTheme.astro";
import LanguageSelector from "../components/common/LanguageSelector.astro";
import Button from "../components/ui/Button.astro";

import { trimSlash } from "../utils/utils.js";
import ToggleMenu from "./common/ToggleMenu.astro";
import Logo from "./Logo.astro";
import { Icon } from "astro-icon/components";

interface ActionLink {
  text: string;
  href: string;
  variant?: "primary" | "secondary" | "tertiary" | "link";
  icon?: string;
  target?: "_blank" | "_self" | "_parent" | "_top";
  type?: "button" | "submit" | "reset";
  class?: string;
}

interface MenuLink {
  text?: string;
  href?: string;
  ariaLabel?: string;
  icon?: string;
  links?: Array<MenuLink>;
}

export interface Props {
  id?: string;
  links?: Array<MenuLink>;
  actions?: Array<ActionLink>; // Usar la nueva interfaz ActionLink
  isSticky?: boolean;
  isDark?: boolean;
  isFullWidth?: boolean;
  showToggleTheme?: boolean;
  showRssFeed?: boolean;
  position?: string;
}

const {
  id = "header",
  links = [],
  actions = [],
  isSticky = false,
  isDark = false,
  isFullWidth = false,
  showToggleTheme = false,
  showRssFeed = false,
  position = "center",
} = Astro.props;

const currentPath = `/${trimSlash(new URL(Astro.url).pathname)}`;
---

<header
  class:list={[
    "fixed top-0 left-0 right-0 z-50 w-full transition-all duration-300 ease-in-out",
    "bg-white/90 dark:bg-slate-900/90 backdrop-blur-md border-b border-transparent",
  ]}
  {...isSticky ? { "data-aw-sticky-header": true } : {}}
  {...id ? { id } : {}}
>
  <div
    class:list={[
      "container mx-auto px-4 sm:px-6 lg:px-8",
      { "max-w-7xl": !isFullWidth },
    ]}
  >
    <div class="flex items-center justify-between h-16">
      <!-- Logo -->
      <div class="flex-shrink-0">
        <a
          href="/"
          class="flex items-center space-x-2 group"
          aria-label="Ir al inicio"
        >
          <Logo />
        </a>
      </div>

      <!-- Desktop Navigation -->
      <nav class="hidden md:block">
        <ul class="flex items-center space-x-1">
          {
            links.map(({ text, href, links: subLinks }) => (
              <li class="relative group">
                {subLinks?.length ? (
                  <div class="dropdown">
                    <button
                      class="flex items-center px-4 py-2 text-sm font-medium text-gray-700 dark:text-gray-300 hover:text-blue-600 dark:hover:text-blue-400 transition-colors duration-200 rounded-lg hover:bg-gray-100 dark:hover:bg-slate-800"
                      aria-expanded="false"
                    >
                      {text}
                      <Icon
                        name="tabler:chevron-down"
                        class="w-4 h-4 ml-1 transition-transform duration-200 group-hover:rotate-180"
                      />
                    </button>
                    <div class="dropdown-menu absolute left-0 mt-2 w-48 bg-white dark:bg-slate-800 rounded-lg shadow-lg border border-gray-200 dark:border-gray-700 opacity-0 invisible group-hover:opacity-100 group-hover:visible transition-all duration-200 transform translate-y-1 group-hover:translate-y-0">
                      <div class="py-2">
                        {subLinks.map(({ text: text2, href: href2 }) => (
                          <a
                            href={href2}
                            class:list={[
                              "block px-4 py-2 text-sm text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-slate-700 hover:text-blue-600 dark:hover:text-blue-400 transition-colors duration-200",
                              {
                                "bg-blue-50 dark:bg-blue-900/20 text-blue-600 dark:text-blue-400":
                                  href2 === currentPath,
                              },
                            ]}
                          >
                            {text2}
                          </a>
                        ))}
                      </div>
                    </div>
                  </div>
                ) : (
                  <a
                    href={href}
                    class:list={[
                      "px-4 py-2 text-sm font-medium rounded-lg transition-colors duration-200",
                      {
                        "text-blue-600 dark:text-blue-400 bg-blue-50 dark:bg-blue-900/20":
                          href === currentPath,
                        "text-gray-700 dark:text-gray-300 hover:text-blue-600 dark:hover:text-blue-400 hover:bg-gray-100 dark:hover:bg-slate-800":
                          href !== currentPath,
                      },
                    ]}
                  >
                    {text}
                  </a>
                )}
              </li>
            ))
          }
        </ul>
      </nav>

      <!-- Desktop Actions & Theme Toggle -->
      <div class="hidden md:flex items-center space-x-3">
        <LanguageSelector />
        {
          showToggleTheme && (
            <div class="flex items-center">
              <ToggleTheme />
            </div>
          )
        }
        {
          actions.map((action) => (
            <Button
              text={action.text}
              href={action.href}
              variant={action.variant || "primary"}
              icon={action.icon}
              target={action.target}
              type={action.type}
              class={`${action.class || ""} text-sm`}
            />
          ))
        }
      </div>

      <!-- Mobile Menu Button -->
      <div class="md:hidden" onclick="event.stopPropagation();">
        <ToggleMenu />
      </div>
    </div>
  </div>

  <!-- Mobile Menu -->
  <div
    id="mobile-menu"
    class="hidden md:hidden bg-white dark:bg-slate-900 border-t border-gray-200 dark:border-gray-700 shadow-lg overflow-hidden"
  >
    <div class="container mx-auto px-4 py-4 space-y-4">
      <!-- Mobile Navigation -->
      {
        links.length > 0 && (
          <nav>
            <ul class="space-y-1">
              {links.map(({ text, href, links: subLinks }) => (
                <li>
                  {subLinks?.length ? (
                    <div class="mobile-dropdown">
                      <button
                        type="button"
                        class="flex items-center justify-between w-full px-4 py-3 text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-slate-800 rounded-lg font-medium transition-colors duration-200"
                      >
                        {text}
                        <Icon
                          name="tabler:chevron-down"
                          class="w-4 h-4 transition-transform duration-200"
                        />
                      </button>
                      <div class="mobile-submenu hidden pl-4 mt-2 space-y-1">
                        {subLinks.map(({ text: text2, href: href2 }) => (
                          <a
                            href={href2}
                            class:list={[
                              "block px-4 py-2 text-sm rounded-lg transition-colors duration-200",
                              {
                                "text-blue-600 dark:text-blue-400 bg-blue-50 dark:bg-blue-900/20":
                                  href2 === currentPath,
                                "text-gray-600 dark:text-gray-400 hover:text-blue-600 dark:hover:text-blue-400 hover:bg-gray-100 dark:hover:bg-slate-800":
                                  href2 !== currentPath,
                              },
                            ]}
                          >
                            {text2}
                          </a>
                        ))}
                      </div>
                    </div>
                  ) : (
                    <a
                      href={href}
                      class:list={[
                        "flex items-center justify-center px-4 py-3 rounded-lg font-medium transition-colors duration-200",
                        {
                          "text-blue-600 dark:text-blue-400 bg-blue-50 dark:bg-blue-900/20":
                            href === currentPath,
                          "text-gray-700 dark:text-gray-300 hover:text-blue-600 dark:hover:text-blue-400 hover:bg-gray-100 dark:hover:bg-slate-800":
                            href !== currentPath,
                        },
                      ]}
                    >
                      {text}
                    </a>
                  )}
                </li>
              ))}
            </ul>
          </nav>
        )
      }

      <!-- Mobile Actions & Theme Toggle -->
      <div class="border-t border-gray-200 dark:border-gray-700 pt-4 space-y-3">
        {
          showToggleTheme && (
            <div class="flex justify-center">
              <ToggleTheme />
            </div>
          )
        }
        {
          actions.length > 0 && (
            <div class="space-y-3">
              {actions.map((action) => (
                <Button
                  text={action.text}
                  href={action.href}
                  variant={action.variant || "primary"}
                  icon={action.icon}
                  target={action.target}
                  type={action.type}
                  class={`w-full ${action.class || ""}`}
                />
              ))}
            </div>
          )
        }
      </div>
    </div>
  </div>
</header>

<script>
  function initializeHeader() {
    const header = document.querySelector("header");
    const toggleButton = document.querySelector("[data-aw-toggle-menu]");
    const mobileMenu = document.getElementById("mobile-menu");

    // Header scroll effect
    function updateHeaderOnScroll() {
      if (!header) return;

      if (window.scrollY > 10) {
        header.classList.add("border-gray-200", "dark:border-gray-700");
        header.classList.remove("border-transparent");
      } else {
        header.classList.remove("border-gray-200", "dark:border-gray-700");
        header.classList.add("border-transparent");
      }
    }

    // Initialize header state
    updateHeaderOnScroll();
    window.addEventListener("scroll", updateHeaderOnScroll);

    // Mobile menu toggle
    if (toggleButton && mobileMenu) {
      // Asegurar estado inicial correcto
      mobileMenu.classList.add("hidden");
      toggleButton.classList.remove("expanded");
      toggleButton.setAttribute("aria-expanded", "false");

      toggleButton.addEventListener("click", (e) => {
        e.preventDefault();
        e.stopPropagation();
        e.stopImmediatePropagation(); // Prevenir otros listeners

        const isHidden = mobileMenu.classList.contains("hidden");

        if (isHidden) {
          // Abrir menú
          mobileMenu.classList.remove("hidden");
          mobileMenu.style.display = "block";
          toggleButton.classList.add("expanded");
          toggleButton.setAttribute("aria-expanded", "true");
          document.body.style.overflow = "hidden";
        } else {
          // Cerrar menú
          mobileMenu.classList.add("hidden");
          toggleButton.classList.remove("expanded");
          toggleButton.setAttribute("aria-expanded", "false");
          document.body.style.overflow = "";
        }
      });
    }

    // Mobile dropdown functionality
    const mobileDropdowns = document.querySelectorAll(
      ".mobile-dropdown button"
    );

    mobileDropdowns.forEach((button) => {
      button.addEventListener("click", (e) => {
        e.preventDefault();
        e.stopPropagation();
        const submenu = button.nextElementSibling;
        const icon = button.querySelector("svg");

        if (submenu) {
          submenu.classList.toggle("hidden");
          icon?.classList.toggle("rotate-180");
        }
      });
    });

    // Close mobile menu when clicking on links
    const mobileLinks = mobileMenu?.querySelectorAll("a");

    mobileLinks?.forEach((link) => {
      link.addEventListener("click", (e) => {
        if (mobileMenu && !mobileMenu.classList.contains("hidden")) {
          mobileMenu.classList.add("hidden");
          toggleButton?.classList.remove("expanded");
          toggleButton?.setAttribute("aria-expanded", "false");
          document.body.style.overflow = "";
        }
      });
    });

    // Close mobile menu when clicking outside (con delay para evitar conflictos)
    setTimeout(() => {
      document.addEventListener("click", (e) => {
        // Verificar si el clic fue en el toggle button o su contenido
        if (toggleButton?.contains(e.target as Node)) {
          return;
        }

        if (
          mobileMenu &&
          !mobileMenu.contains(e.target as Node) &&
          !mobileMenu.classList.contains("hidden")
        ) {
          mobileMenu.classList.add("hidden");
          toggleButton?.classList.remove("expanded");
          toggleButton?.setAttribute("aria-expanded", "false");
          document.body.style.overflow = "";
        }
      });
    }, 100); // Delay de 100ms para evitar conflictos

    // Handle window resize to ensure proper mobile menu state
    window.addEventListener("resize", () => {
      const isMobile = window.innerWidth < 768; // md breakpoint

      if (!isMobile && mobileMenu && !mobileMenu.classList.contains("hidden")) {
        // Si cambiamos a desktop y el menú móvil está abierto, cerrarlo
        mobileMenu.classList.add("hidden");
        toggleButton?.classList.remove("expanded");
        toggleButton?.setAttribute("aria-expanded", "false");
        document.body.style.overflow = "";
      }
    });

    // Desktop dropdown functionality with hover
    const desktopDropdowns = document.querySelectorAll(".dropdown");

    desktopDropdowns.forEach((dropdown) => {
      const button = dropdown.querySelector("button");
      const menu = dropdown.querySelector(".dropdown-menu");

      if (button && menu) {
        let timeout: NodeJS.Timeout;

        dropdown.addEventListener("mouseenter", () => {
          clearTimeout(timeout);
          menu.classList.remove("opacity-0", "invisible", "translate-y-1");
          menu.classList.add("opacity-100", "visible", "translate-y-0");
          button.setAttribute("aria-expanded", "true");
        });

        dropdown.addEventListener("mouseleave", () => {
          timeout = setTimeout(() => {
            menu.classList.add("opacity-0", "invisible", "translate-y-1");
            menu.classList.remove("opacity-100", "visible", "translate-y-0");
            button.setAttribute("aria-expanded", "false");
          }, 150);
        });
      }
    });
  }

  // Clean up function
  function cleanupHeader() {
    const mobileMenu = document.getElementById("mobile-menu");
    const toggleButton = document.querySelector("[data-aw-toggle-menu]");

    if (mobileMenu && !mobileMenu.classList.contains("hidden")) {
      mobileMenu.classList.add("hidden");
      toggleButton?.classList.remove("expanded");
      toggleButton?.setAttribute("aria-expanded", "false");
      document.body.style.overflow = "";
    }
  }

  // Initialize when DOM is loaded
  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", initializeHeader);
  } else {
    initializeHeader();
  }

  // Re-initialize on page navigation (for SPA-like behavior)
  document.addEventListener("astro:page-load", () => {
    cleanupHeader();
    initializeHeader();
  });

  // Cleanup on page unload
  document.addEventListener("astro:before-preparation", cleanupHeader);
</script>

<style>
  /* Asegurar que el header sea visible en todas las resoluciones */
  header {
    display: block !important;
    visibility: visible !important;
  }

  /* Smooth transitions for dropdowns */
  .dropdown-menu {
    transition:
      opacity 0.2s ease-in-out,
      visibility 0.2s ease-in-out,
      transform 0.2s ease-in-out;
  }

  /* Mobile menu animation */
  #mobile-menu {
    transition: max-height 0.3s ease-out;
  }

  #mobile-menu.hidden {
    max-height: 0;
    overflow: hidden;
    display: none;
  }

  #mobile-menu:not(.hidden) {
    max-height: 100vh;
    display: block !important;
    visibility: visible !important;
    opacity: 1 !important;
    animation: slideDown 0.3s ease-out;
  }

  @keyframes slideDown {
    from {
      opacity: 0;
      transform: translateY(-10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  /* Asegurar que el menú móvil solo se muestre en mobile */
  @media (min-width: 768px) {
    #mobile-menu {
      display: none !important;
    }
  }

  /* Asegurar que el toggle menu solo se muestre en mobile */
  @media (min-width: 768px) {
    [data-aw-toggle-menu] {
      display: none !important;
    }
  }

  /* Active link indicator */
  .aw-link-active {
    position: relative;
  }

  .aw-link-active::after {
    content: "";
    position: absolute;
    bottom: -2px;
    left: 50%;
    transform: translateX(-50%);
    width: 20px;
    height: 2px;
    background: currentColor;
    border-radius: 1px;
  }

  /* Focus styles for accessibility */
  button:focus-visible,
  a:focus-visible {
    outline: 2px solid rgb(59 130 246);
    outline-offset: 2px;
  }

  /* Prevenir parpadeo del header */
  .container {
    min-height: inherit;
  }

  /* Asegurar transiciones suaves */
  .transition-all {
    transition-property: all;
    transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
    transition-duration: 300ms;
  }
</style>

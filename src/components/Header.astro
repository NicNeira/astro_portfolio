---
import ToggleTheme from "../components/common/ToggleTheme.astro";
import Button from "../components/ui/Button.astro";

import { trimSlash } from "../utils/utils.js";
import ToggleMenu from "./common/ToggleMenu.astro";
import Logo from "./Logo.astro";
import { Icon } from "astro-icon/components";

// Actualizada para coincidir mejor con las props de Button.astro
interface ActionLink {
  text: string;
  href: string;
  variant?: "primary" | "secondary" | "tertiary" | "link";
  icon?: string;
  target?: "_blank" | "_self" | "_parent" | "_top";
  type?: "button" | "submit" | "reset";
  class?: string; // Para clases adicionales
}

interface MenuLink {
  text?: string;
  href?: string;
  ariaLabel?: string;
  icon?: string;
  links?: Array<MenuLink>;
}

export interface Props {
  id?: string;
  links?: Array<MenuLink>;
  actions?: Array<ActionLink>; // Usar la nueva interfaz ActionLink
  isSticky?: boolean;
  isDark?: boolean;
  isFullWidth?: boolean;
  showToggleTheme?: boolean;
  showRssFeed?: boolean;
  position?: string;
}

const {
  id = "header",
  links = [],
  actions = [],
  isSticky = false,
  isDark = false,
  isFullWidth = false,
  showToggleTheme = false,
  showRssFeed = false,
  position = "center",
} = Astro.props;

const currentPath = `/${trimSlash(new URL(Astro.url).pathname)}`;
---

<header
  class:list={[
    "fixed",
    "top-0",
    "z-50",
    "flex-none",
    "mx-auto",
    "w-full",
    "transition-all",
    "ease-in-out",
    {
      "bg-white dark:bg-black": !isDark,
      "bg-black dark:bg-white": isDark,
    },
  ]}
  {...isSticky ? { "data-aw-sticky-header": true } : {}}
  {...id ? { id } : {}}
>
  <div
    class:list={[
      "relative",
      "text-default",
      "dark:text-white",
      "py-3",
      "px-3",
      "md:px-6",
      "mx-auto",
      "w-full",
      "flex",
      "items-center",
      "justify-between",
      {
        "max-w-7xl": !isFullWidth,
      },
    ]}
  >
    <div class:list={["flex justify-between items-center", "flex-shrink-0"]}>
      <a class="flex items-center" href={"/"} aria-label="Home">
        <Logo />
      </a>
      <div class="flex items-center md:hidden gap-2">
        <ToggleMenu />
      </div>
    </div>

    {/* Menú móvil */}
    <div
      id="mobile-menu-content"
      class="hidden md:hidden flex-col fixed top-[60px] left-0 right-0 h-[calc(100vh-60px)] bg-black z-20 shadow-lg"
    >
      <nav
        class="flex-1 flex flex-col items-center text-default overflow-y-auto"
        aria-label="Main navigation mobile"
      >
        <ul
          class="flex flex-col items-center w-full text-xl tracking-[0.01rem] font-medium pt-8 pb-4"
        >
          {
            links.map(({ text, href, links: subLinks }) => (
              <li
                class:list={[
                  "w-full text-center",
                  { "dropdown-mobile": subLinks?.length },
                ]}
              >
                {subLinks?.length ? (
                  <>
                    <button class="font-medium hover:text-link dark:hover:text-white px-4 py-3 flex items-center w-full justify-center">
                      {text}
                      <Icon
                        name="tabler:chevron-down"
                        class="w-3.5 h-3.5 ml-0.5 rtl:ml-0 rtl:mr-0.5"
                      />
                    </button>
                    <ul class="hidden bg-gray-100 dark:bg-slate-800 w-full">
                      {subLinks.map(({ text: text2, href: href2 }) => (
                        <li>
                          <a
                            class:list={[
                              "font-medium hover:text-link dark:hover:text-white px-4 py-2 flex items-center w-full justify-center text-base",
                              { "aw-link-active": href2 === currentPath },
                            ]}
                            href={href2}
                          >
                            {text2}
                          </a>
                        </li>
                      ))}
                    </ul>
                  </>
                ) : (
                  <a
                    class:list={[
                      "font-medium hover:text-link dark:hover:text-blue-500 px-4 py-3 flex items-center w-full justify-center",
                      { "aw-link-active": href === currentPath },
                    ]}
                    href={href}
                  >
                    {text}
                  </a>
                )}
              </li>
            ))
          }
        </ul>
      </nav>
      <div
        class="w-full border-t border-gray-200 dark:border-slate-700 mt-auto"
      >
        <div class="flex flex-col w-full p-4 gap-4">
          {
            actions.length > 0 && (
              <div class="w-full">
                {actions.map((actionProps) => (
                  <Button
                    text={actionProps.text}
                    href={actionProps.href}
                    variant={actionProps.variant || "primary"}
                    icon={actionProps.icon}
                    target={actionProps.target}
                    type={actionProps.type}
                    class={`w-full ${actionProps.class || ""}`}
                  />
                ))}
              </div>
            )
          }
          {
            showToggleTheme && (
              <div class="flex justify-center">
                <ToggleTheme />
              </div>
            )
          }
        </div>
      </div>
    </div>

    {/* Navegación principal para Desktop */}
    <nav
      class:list={[
        "items-center md:flex hidden text-default overflow-x-auto md:overflow-visible",
        "flex-1",
        "justify-center",
        "mx-4",
      ]}
      aria-label="Main navigation"
    >
      <ul
        class="flex flex-col md:flex-row md:self-center w-full md:w-auto text-xl md:text-base tracking-[0.01rem] font-medium items-stretch justify-center"
      >
        {
          links.map(({ text, href, links: subLinks }) => (
            <li
              class:list={[
                { dropdown: subLinks?.length },
                "md:mr-1.5 rtl:md:mr-0 rtl:md:ml-1.5",
              ]}
            >
              {subLinks?.length ? (
                <>
                  <button class="font-medium hover:text-link dark:hover:text-white px-4 py-3 flex items-center whitespace-nowrap">
                    {text}
                    <Icon
                      name="tabler:chevron-down"
                      class="w-3.5 h-3.5 ml-0.5 rtl:ml-0 rtl:mr-0.5 hidden md:inline"
                    />
                  </button>
                  <ul class="dropdown-menu md:backdrop-blur-md dark:md:bg-dark rounded md:absolute pl-4 md:pl-0 md:hidden font-medium md:shadow-xl md:border md:border-gray-200 dark:md:border-gray-700 md:min-w-[200px] py-2 md:px-1 md:mt-2">
                    {subLinks.map(({ text: text2, href: href2 }) => (
                      <li>
                        <a
                          class:list={[
                            "font-medium hover:text-link dark:hover:text-white px-4 py-3 flex items-center w-full whitespace-nowrap",
                            { "aw-link-active": href2 === currentPath },
                          ]}
                          href={href2}
                        >
                          {text2}
                        </a>
                      </li>
                    ))}
                  </ul>
                </>
              ) : (
                <a
                  class:list={[
                    "font-medium hover:text-link dark:hover:text-blue-500 px-4 py-3 flex items-center whitespace-nowrap",
                    { "aw-link-active": href === currentPath },
                  ]}
                  href={href}
                >
                  {text}
                </a>
              )}
            </li>
          ))
        }
      </ul>
    </nav>

    {/* Contenedor para ToggleTheme y Actions en Desktop */}
    <div
      class:list={[
        "hidden md:flex items-center",
        "flex-shrink-0",
        "justify-end",
      ]}
    >
      {
        actions.length > 0 && (
          <div class="ml-2 hidden md:hidden">
            {actions.map((actionProps) => (
              <Button
                text={actionProps.text}
                href={actionProps.href}
                variant={actionProps.variant || "primary"}
                icon={actionProps.icon}
                target={actionProps.target}
                type={actionProps.type}
                class={actionProps.class}
              />
            ))}
          </div>
        )
      }
      {
        showToggleTheme && (
          <div class="ml-2">
            <ToggleTheme />
          </div>
        )
      }
    </div>
  </div>
</header>

<script>
  const toggleMenuButton = document.querySelector("[data-aw-toggle-menu]");
  const mobileMenuContent = document.getElementById("mobile-menu-content");
  const dropdownMobileButtons = document.querySelectorAll(
    ".dropdown-mobile > button"
  );
  const header = document.querySelector("header");

  // Función para cerrar el menú móvil
  const closeMobileMenu = () => {
    if (toggleMenuButton && mobileMenuContent) {
      toggleMenuButton.classList.remove("expanded");
      toggleMenuButton.setAttribute("aria-expanded", "false");
      mobileMenuContent.classList.add("hidden");
      mobileMenuContent.classList.remove("flex");

      // Cerrar todos los submenús
      dropdownMobileButtons.forEach((button) => {
        const submenu = button.nextElementSibling as HTMLElement | null;
        if (submenu && !submenu.classList.contains("hidden")) {
          submenu.classList.add("hidden");
          button.querySelector("svg")?.classList.remove("rotate-180");
        }
      });
    }
  };

  // Función para manejar la visibilidad del borde según la posición de scroll
  const handleHeaderBorder = () => {
    if (!header) return;

    if (window.scrollY === 0) {
      // Si estamos en la parte superior, quitar el borde
      header.classList.remove(
        "border-b",
        "border-gray-200",
        "dark:border-slate-700"
      );
      header.classList.add("border-b-0");
    } else {
      // Si hay scroll, restaurar el borde
      header.classList.add(
        "border-b",
        "border-gray-200",
        "dark:border-slate-700"
      );
      header.classList.remove("border-b-0");
    }
  };

  // Inicializar el estado del borde al cargar la página
  handleHeaderBorder();

  // Agregar event listener para el scroll
  window.addEventListener("scroll", handleHeaderBorder);

  if (toggleMenuButton && mobileMenuContent) {
    toggleMenuButton.addEventListener("click", () => {
      const isExpanded = toggleMenuButton.classList.toggle("expanded");
      toggleMenuButton.setAttribute("aria-expanded", String(isExpanded));
      mobileMenuContent.classList.toggle("hidden");
      mobileMenuContent.classList.toggle("flex");

      if (!isExpanded) {
        dropdownMobileButtons.forEach((button) => {
          const submenu = button.nextElementSibling as HTMLElement | null;
          if (submenu && !submenu.classList.contains("hidden")) {
            submenu.classList.add("hidden");
            button.querySelector("svg")?.classList.remove("rotate-180");
          }
        });
      }
    });
  }

  dropdownMobileButtons.forEach((button) => {
    button.addEventListener("click", (event) => {
      event.preventDefault();
      const submenu = button.nextElementSibling as HTMLElement | null;
      submenu?.classList.toggle("hidden");
      button.querySelector("svg")?.classList.toggle("rotate-180");
    });
  });

  const dropdownButtons = document.querySelectorAll(".dropdown > button");
  dropdownButtons.forEach((button) => {
    const submenu = button.nextElementSibling as HTMLElement | null;
    if (!submenu) return;

    button.addEventListener("click", (event) => {
      event.preventDefault();
      const isHidden = submenu.classList.toggle("md:hidden");
      if (!isHidden) {
        // Si se muestra el submenú, añadir clases para posicionarlo correctamente
        // Esto puede necesitar ajustes basados en tu CSS específico para dropdown-menu
        submenu.classList.add("md:absolute", "md:mt-2", "md:z-50");
      }
      button.querySelector("svg")?.classList.toggle("rotate-180");
    });

    document.addEventListener("click", (e) => {
      if (
        submenu &&
        !button.contains(e.target as Node) &&
        !submenu.contains(e.target as Node)
      ) {
        submenu.classList.add("md:hidden");
        button.querySelector("svg")?.classList.remove("rotate-180");
      }
    });
  });

  // Cerrar menú móvil al hacer clic en cualquier link
  const mobileMenuLinks = document.querySelectorAll("#mobile-menu-content a");
  mobileMenuLinks.forEach((link) => {
    link.addEventListener("click", closeMobileMenu);
  });
</script>
